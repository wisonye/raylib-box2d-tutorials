* Raylib Box2D Tutorial

** Core concepts

*** World

Represent a physics world, it's a collection of bodies, fixtures, and constraints that interact together.

Box2D supports the creation of multiple worlds (each of them has different =World Id=).


*** (Rigid) Body

Simulate a physical object in the real world, its physical attribute affects every simulation step calculation in the world
   
Each body has a type:

    > =static= (default): zero mass, zero velocity, may be manually moved
    > =kinematic=: zero mass, non-zero velocity set by user, moved by solver
    > =dynamic=: positive mass, non-zero velocity determined by forces, moved by solver

The body itself doesn't have geometry attributes (how it looks), that's why usually a body will have a Shape attached to it to represent the geometry attributes.


*** Shape

It represents the geometry attributes of a given =Body=, it determines how the =Body= looks like:

    > =Polygon Shape= - Including Box/Rectangle/Square (4 vertices polygon)
    > =Circle Shape=
    > =Capsule Shape=
    > =Chain Shape= - used as surface

Also, it has the following physical attributes, e.g:
    > friction (default value ~0.6~)
    > restitution (default is ~0.0~): affect the bouncing behaviour
    > density (default is ~0.0~): affect the mass



** How to create a rigid body in the =Box2D= world

Here are the steps about how to create a rigid body in the Box2D world:

1. Create ~b2BodyDef~ instance with the following attributes:
    - init position
    - type
        > =static= (default): zero mass, zero velocity, may be manually moved
        > =kinematic=: zero mass, non-zero velocity set by user, moved by solver
        > =dynamic=: positive mass, non-zero velocity determined by forces, moved by solver

2. Create a body instance (~b2BodyId)~ by the given ~b2BodyDef~, body instance is heap-allocated and it has no geometry (no shape), it represents the physical attributes:

    - position
    - velocity
    - acceleration
    - force
    - torque
    - mass
    - etc.

3. Create =Shape= (heap-allocated) and attach it to the =Body=, it determines how the =Body=
   looks like:
    > ~b2MakeBox/b2MakeRoundedBox~ -> Polygon Shape - Including Box/Rectangle/Square (4 vertices polygon)
    > ~b2Circle~ -> Circle Shape
    > ~b2MakeCapsule~ -> Capsule Shape
    > =Chain Shape= - used as surface

   You need to create ~b2ShapeDef~ to describe the other physical attributes, e.g:
    - friction (default value ~0.6~)
    - restitution (default is ~0.0~): affect the bouncing behaviour
    - density (default is ~0.0~): affect the mass


** Box2D measures units and coordinates

kgg
