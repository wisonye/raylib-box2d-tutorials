* Raylib Box2D Tutorial

** How to build and run

*** Pull the submodule if you haven't yet, only do this once

This repo depends on =box2c= and =raylib= repos and has separate build step to compile them from source.

#+BEGIN_SRC bash
  git submodule update --init --depth=1
  # Submodule 'box2c' (https://github.com/erincatto/box2c.git) registered for path 'box2c'
  # Submodule 'raylib' (https://github.com/raysan5/raylib.git) registered for path 'raylib'
  # Cloning into '/home/wison/zig/raylib-box2d-tutorials/box2c'...
  # Cloning into '/home/wison/zig/raylib-box2d-tutorials/raylib'...
  # remote: Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
  # remote: Enumerating objects: 27, done.
  # remote: Counting objects: 100% (27/27), done.
  # remote: Compressing objects: 100% (12/12), done.
  # remote: Total 14 (delta 11), reused 2 (delta 0), pack-reused 0
  # Unpacking objects: 100% (14/14), 1.88 KiB | 481.00 KiB/s, done.
  # From https://github.com/erincatto/box2c
  #  * branch            519ded32531e1574caba32700481f4b5294dc383 -> FETCH_HEAD
  # Submodule path 'box2c': checked out '519ded32531e1574caba32700481f4b5294dc383'
  # Submodule path 'raylib': checked out '99f22a47ff09ae3bef4ee16c1910953efc46832b'
#+END_SRC


*** List all supported demo run steps

#+BEGIN_SRC bash
 zig build --help | grep "run-" 
#+END_SRC


*** Run the particular demo

For example:

#+BEGIN_SRC bash
  zig build run-click-to-generate-dynamic-boxes
#+END_SRC

All demo run steps don't create binary files into ~zig-out/bin~ folder, if you want to produce binary files, please run ~zig build~ or ~zig build -Drelease=true~.


*** Produce release demo binary files

#+BEGIN_SRC bash
  # Optional, remove cache and existing files
  rm -rf zig-cache zig-out

  # Create release build
  zig build -Drelease=true

  # List release binaries
  ls -lht zig-out/{lib,bin}
  # zig-out/bin:
  # total 13M
  # -rwxr-xr-x 1 7.0M Dec 25 16:49 click-to-generate-dynamic-boxes*
  # -rwxr-xr-x 1 6.0M Dec 25 16:49 temp-test*
  # 
  # zig-out/lib:
  # total 14M
  # -rw-r--r-- 1 14M Dec 25 16:49 libbox2c.a
#+END_SRC


- =raylib_build.zig= runs ~cd raybuild && zig build~ command behind the scenes to create a static library and a few header files:

    #+BEGIN_SRC bash
      ls -lht raylib/zig-out/{lib, include, bin}
      # ls: cannot access 'raylib/zig-out/bin': No such file or directory
      # raylib/zig-out/lib:
      # total 12M
      # -rw-r--r-- 1 wison wison 12M Dec 25 16:25 libraylib.a
      # 
      # raylib/zig-out/include:
      # total 416K
      # -rw-r--r-- 1 wison wison 226K Dec 25 15:30 rlgl.h
      # -rw-r--r-- 1 wison wison 123K Dec 25 15:30 raylib.h
      # -rw-r--r-- 1 wison wison  62K Dec 25 15:30 raymath.h
    #+END_SRC


- =box2c_buidl.zig= creates a static library: ~zig-out/lib/libbox2c.a~, and it depends on =raylib build=.


- =demo_build.zig= create all demo run steps, each demo binary links to ~raylib/zig-out/lib/libraylib.a~ and ~zig-out/lib/libbox2c.a~ statically.


** Core concepts

*** World

Represent a physics world, it's a collection of bodies, fixtures, and constraints that interact together.

Box2D supports the creation of multiple worlds (each of them has different =World Id=).


*** (Rigid) Body

Simulate a physical object in the real world, its physical attribute affects every simulation step calculation in the world
   
Each body has a type:

    - =static= (default): zero mass, zero velocity, may be manually moved
    - =kinematic=: zero mass, non-zero velocity set by user, moved by solver
    - =dynamic=: positive mass, non-zero velocity determined by forces, moved by solver

The body itself doesn't have geometry attributes (how it looks), that's why usually a body will have a Shape attached to it to represent the geometry attributes.


*** Shape

It represents the geometry attributes of a given =Body=, it determines how the =Body= looks like:

    - =Polygon Shape= - Including Box/Rectangle/Square (4 vertices polygon)
    - =Circle Shape=
    - =Capsule Shape=
    - =Chain Shape= - used as surface

Also, it has the following physical attributes, e.g:

    - friction (default value ~0.6~)
    - restitution (default is ~0.0~): affect the bouncing behaviour
    - density (default is ~0.0~): affect the mass



** How to create a rigid body in the =Box2D= world

Here are the steps about how to create a rigid body in the Box2D world:

1. Create ~b2BodyDef~ instance with the following attributes:
    - init position
    - type
        - =static= (default): zero mass, zero velocity, may be manually moved
        - =kinematic=: zero mass, non-zero velocity set by user, moved by solver
        - =dynamic=: positive mass, non-zero velocity determined by forces, moved by solver

2. Create a body instance (~b2BodyId)~ by the given ~b2BodyDef~, body instance is heap-allocated and it has no geometry (no shape), it represents the physical attributes:

    - position
    - velocity
    - acceleration
    - force
    - torque
    - mass
    - etc.

3. Create =Shape= (heap-allocated) and attach it to the =Body=, it determines how the =Body=
   looks like:
    - ~b2MakeBox/b2MakeRoundedBox~ -> Polygon Shape - Including Box/Rectangle/Square (4 vertices polygon)
    - ~b2Circle~ -> Circle Shape
    - ~b2MakeCapsule~ -> Capsule Shape
    - =Chain Shape= - used as surface

   You need to create ~b2ShapeDef~ to describe the other physical attributes, e.g:
    - friction (default value ~0.6~)
    - restitution (default is ~0.0~): affect the bouncing behaviour
    - density (default is ~0.0~): affect the mass


** Box2D measures units and coordinates

